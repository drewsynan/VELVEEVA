#!/bin/bash

printf "                     WELCOME TO           \n"
printf "	 _   ________ _   ___________   _____ \n"
printf "	| | / / __/ /| | / / __/ __| | / / _ |\n"
printf "	| |/ / _// /_| |/ / _// _/ | |/ / __ |\n"
printf "	|___/___/____|___/___/___/ |___/_/ |_|\n"
printf " \n"
echo "💃 INSTALLING..."
echo "🔎 CHECKING DEPENDENCIES..."
exitstatus=0

unamestring=`uname`
platform='unknown'
pkgman='installing '

if [[ "$unamestring" == 'Darwin' ]]; then
	platform="OSX"
	pkgman="brew install"
elif [[ "$unamestring" == 'Linux' ]]; then
	platform="Linux-generic"
	linuxname=`lsb_release -si`
	if [[ "$linuxname" == 'Ubuntu' ]]; then
		platform="Ubuntu"
		pkgman="sudo apt-get install"
	else 
		pkgman="sudo yum install"
	fi
fi

command -v gcc >/dev/null 2>&1 || { 
	if [[ "$platform" == 'OSX' ]]
	then
		printf "💩 gcc not found\n👉 try installing the XCode command line tools\n\n"
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		printf "💩 gcc not found\n👉 try $pgkman build-essential\n\n"
	else
		printf "💩 gcc not found\n👉 try $pkgman gcc\n\n" >&2
	fi

	exitstatus=1
}

command -v python3 >/dev/null 2>&1 || { printf "💩 python 3 not found\n👉 try $pkgman python3\n\n" >&2; exitstatus=1; }
# command -v node >/dev/null 2>&1 || {
# 	if [[ "$platform" == 'OSX' ]]
# 	then
# 		printf "💩 nodejs not found\n👉 try installing the package from nodejs.org/en/download\n\n" >&2 
# 	elif [[ "$platform" == 'Ubuntu' ]]
# 	then
# 		printf "💩 nodejs not found\n👉 try $pkgman nodejs-legacy\n\n" >&2 
# 	else
# 		printf "💩 nodejs not found\n👉 try $pkgman node\n\n" >&2
# 	fi

# 	exitstatus=1
# }

# command -v npm >/dev/null 2>&1 || {
# 	if [[ "$platform" == 'OSX' ]]
# 	then
# 		printf "💩 npm not found\n👉 try installing the nodejs package from nodejs.org/en/download\n\n" >&2 
# 	elif [[ "$platform" == 'Ubuntu' ]]
# 	then
# 		printf "💩 npm not found\n👉 try $pkgman npm\n\n" >&2 
# 	else
# 		printf "💩 npm not found\n👉 try $pkgman npm\n\n" >&2
# 	fi

# 	exitstatus=1
# }

command -v pip3 >/dev/null 2>&1 || { printf "💩 pip3 not found\n👉 try $pkgman python3-pip\n\n" >&2; exitstatus=1; }
command -v virtualenv >/dev/null 2>&1 || { 
	if [[ "$platform" == 'Ubuntu' ]]
	then
		printf "💩 virtualenv not found\n👉 try pip3 install virtualenv\n\n" >&2
	else
		printf "💩 virtualenv not found\n👉 try pip3 install virtualenv\n\n" >&2
	fi

	exitstatus=1
}
# command -v phantomjs >/dev/null 2>&1 || { printf "💩 phantomjs not found\n👉 try $pkgman phantomjs\n\n" >&2; exitstatus=1; }

# command -v convert >/dev/null 2>&1 || { printf "💩 ImageMagick (convert) not found\n👉 try $pkgman imagemagick\n\n" >&2; exitstatus=1; }
# command -v mogrify >/dev/null 2>&1 || { printf "💩 ImageMagick (mogrify) not found\n👉 try $pkgman imagemagick\n\n" >&2; exitstatus=1; }

# check python, node versions
if [[ -z `command -v python3 >/dev/null 2>&1` ]]
then
	PYPASS=`python3 -c 'import sys; print(int(sys.version_info[0]==3 and sys.version_info[1] >= 4))'`
	if [ $PYPASS != 1 ]
	then
		{ printf "💩 unsupported python3 version found.\n👉 Please upgrade your python >= 3.4\n\n" >&2; exitstatus=1; }
	fi
fi

if [[ -z `command -v node >/dev/null 2>&1` ]]
then
	NODEPASS=`node --version | cut -c2- | awk -F. '{print (($1 == 0 && $2>=10) || ($1 >= 4))}'`
	if [ $NODEPASS != 1 ]
	then
		{ printf "💩 unsupported nodejs version found.\n👉 Please upgrade to >= 0.10\n\n" >&2; exitstatus=1; }
	fi
fi

# check for libxml2 and libxslt
if [ -z `find /usr/include -name libxml2 2>/dev/null` ]
then
	printf "💩 libxml2 not found\n" >&2
	if [[ "$platform" == 'OSX' ]]
	then
		printf "👉 try $pkgman libxml2\n\n"
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		printf "👉 try $pkgman libxml2-dev\n\n"
	fi

	exitstatus=1
fi

if [ -z `find /usr/include -name libxslt 2>/dev/null` ]
then
	printf "💩 libxslt not found\n" >&2
	if [[ "$platform" == 'OSX' ]]
	then
		printf "👉 try $pkgman libxslt\n\n"
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		printf "👉 try $pkgman libxslt-dev\n\n"
	fi

	exitstatus=1
fi

# check for libjpeg on linux
if [[ "$unamestring" == 'Linux' ]]
then
	if [ -z `find /usr/include -name jpeglib.h 2>/dev/null` ]
	then
		if [[ "$platform" == 'Ubuntu' ]]
		then
			printf "💩 libjpeg not found\n👉 try $pkgman libjpeg-dev\n\n"
		else
			printf "💩 libjpeg not found\n👉 try $pkgman libjpeg\n\n"
		fi

		exitstatus=1
	fi
fi

# check for zlib on linus
if [[ "$unamestring" == "Linux" ]]
then
	if [-z `find /usr/include -name zlib.h 2>/dev/null` ]
	then
		if [[ "$platform" == 'Ubuntu' ]]
		then
			printf "💩 zlib not found\n👉 try $pkgman zlib1g-dev\n\n"
		else
			printf "💩 zlib not found\n👉 try $pkgman zlib-devel\n\n"
		fi
		
		exitstatus=1
	fi
fi

if [ $exitstatus != 0 ]
then
	echo " "
	echo "                     💀  💀  💀"
	echo " "
	echo "         Some dependencies could not be met."
	echo "           Please install and try again."
	echo " "
	exit $exitstatus
else
	echo "🎉 DEPENDENCIES MET!"
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

cd $DIR

echo "🐍 INSTALLING PYTHON VIRTUALENV PACKAGES..."

virtualenv -p $(which python3) lib/velvenv
source lib/velvenv/bin/activate
pip3 install -r requirements.txt || { deactivate; echo "😱  Error installing python packages! Aborting. 😱" >&2; exit 1; }
deactivate

# echo "☕️ INSTALLING NODE MODULES..."

# npm install || { echo "😱 Error installing node modules! Aborting. 😱" >&2; exit 1; }

echo "🍕 yum!"


#!/usr/bin/env python3
import lib.activate_venv

from lib.veevutils import banner
from painter import paint

import json
import os
import stat
import sys
import textwrap
import pprint

def string_parser(input, default):
	converted = str(input)
	if converted == '':
		return default
	else:
		return converted

def int_parser(input, default):
	try:
		converted = int(input)
		return converted
	except ValueError:
		return default

def promptRuleset(ruleset, configState):
	section_name = ruleset['key']
	prompts = ruleset['subkeys']

	configState[section_name] = {}

	def makequery(name, default):
		if str(default) != '':
			default = " [%s]" % paint.bold.yellow(str(default))

		return ("What is the %s%s? " % (name, default))

	for prompt in prompts:
		query = makequery(prompt['prompt'], prompt['default'])
		parsed = prompt['parser'](input(query), prompt['default'])

		configState[section_name][prompt['key']] = parsed

	return configState

def confirm(prompt, default="y"):
	if default != '':
		default = " [%s]" % paint.bold.yellow(default)

	confirm = input("\n%s%s? " % (prompt, default))

	return not (confirm.upper() == 'N' or confirm.upper() == 'NO')

def write_config(config, filename="VELVEEVA-config.json"):
	with open(filename, 'w') as f:
		f.write(json.dumps(config))

def runScript():
	main = {
		'key': 'MAIN',
		'subkeys' : [
			{
				'key' : 'name',
				'prompt': 'project name', 
				'default': 'untitled', 
				'parser': string_parser
			},
			{
				'key' : 'source_dir',
				'prompt':'source directory',
				'default': './src',
				'parser': string_parser,
				'generate': True
			},
			{	'key' : 'output_dir', 
				'prompt':'build directory',
				'default': './build',
				'parser': string_parser,
				'generate': True
			},
			{
				'key' : 'globals_dir',
				'prompt':'globals directory', 
				'default': './global', 
				'parser': string_parser,
				'generate': True
			},
			{
				'key' : 'templates_dir', 
				'prompt':'templates directory', 
				'default': './templates', 
				'parser': string_parser,
				'generate': True
			},
			{
				'key' : 'temp_dir',
				'prompt' : 'temp directory',
				'default' :'./temp',
				'parser': string_parser,
			},
			{
				'key' : 'partials_dir',
				'prompt': 'partials directory',
				'default': './partials',
				'parser': string_parser,
				'generate': True
			},
			{
				'key' : 'zips_dir',
				'prompt' : 'built zips sub-directory',
				'default' : '_zips',
				'parser' : string_parser
			},
			{
				'key' : 'ctls_dir',
				'prompt': 'control files sub-directory',
				'default' : "_ctls",
				'parser' : string_parser
			}
		]
	}

	ss_full = {
		'key' : 'full',
		'subkeys' : [
			{
				'key' : 'width',
				'prompt' : 'width',
				'default': 1024, 
				'parser': int_parser
			},
			{
				'key' : 'height',
				'prompt' : 'height', 
				'default': 768, 
				'parser': int_parser
			},
			{
				'key' : 'name',
				'prompt' : 'file suffix',
				'default' : '-full.jpg',
				'parser': string_parser 
			}
		]
	}

	ss_thumb = {
		'key' : 'thumb',
		'subkeys' : [
			{
				'key' : 'width',
				'prompt' : 'width',
				'default': 200, 
				'parser': int_parser
			},
			{
				'key' : 'height',
				'prompt' : 'height', 
				'default': 150, 
				'parser': int_parser
			},
			{
				'key' : 'name',
				'prompt' : 'file suffix',
				'default' : '-thumb.jpg',
				'parser': string_parser 
			}
		]
	}

	ss = {
		'key' : 'SS',
		'subkeys' : [ss_full, ss_thumb]
	}

	veeva = {
		'key': 'VEEVA',
		'subkeys': [
			{
				'key' : 'server',
				'prompt' : 'Veeva ftp server',
				'default' : '',
				'parser' : string_parser
			},
			{
				'key' : 'username',
				'prompt' : 'ftp username',
				'default' : '',
				'parser' : string_parser
			},
			{
				'key' : 'password',
				'prompt' : 'ftp password',
				'default' : '',
				'parser' : string_parser
			},
			{
				'key' : 'email',
				'prompt' : 'Veeva notification email',
				'default' : '',
				'parser' : string_parser	
			}
		]
	}

	hooks = {
		'key': 'HOOKS',
		'subkeys': [
			{
				'key': 'pre',
				'prompt': 'Pre-flight script filename',
				'default': './pre.sh',
				'parser': string_parser
			},
			{
				'key': 'post',
				'prompt': 'Post-flight script filename',
				'default': './post.sh',
				'parser': string_parser
			}
		]
	}
	
	
	config = {}

	print(banner(subtitle="New Project Generator"))
	
	print(paint.bold.yellow("GENERAL CONFIGURATION"))
	promptRuleset(main, config)

	print("\n" + paint.bold.yellow("SCREENSHOTS"))
	ss = {}
	print(paint.bold.yellow("Full-Size Screenshots"))
	promptRuleset(ss_full, ss)
	print("\n" + paint.bold.yellow("Slide Thumbnails"))
	promptRuleset(ss_thumb, ss)
	config['SS'] = ss

	print("\n" + paint.bold.yellow("HOOKS"))
	promptRuleset(hooks, config)

	print("\n" + paint.bold.yellow("VEEVA DEPLOYMENT"))
	promptRuleset(veeva, config)

	
	print("\n" + paint.bold.yellow("SUMAMRY"))
	print(paint.bold.yellow("VELVEEVA-config.json"))
	pprint.pprint(config)

	if confirm("Write config file"):
		print("\nWriting VELVEEVA-config.json file...")
		write_config(config)

	if confirm("Create directories"):
		print("\nCreating directory structure...")
		for k in main['subkeys']:
			if k.get('generate', False):
				print(config['MAIN'][k['key']])
				os.makedirs(config['MAIN'][k['key']], exist_ok=True)

	if confirm("Create scripts"):
		for k in hooks['subkeys']:
			current_script = config['HOOKS'][k['key']]
			ext = os.path.splitext(current_script)[1].lower()
			shebang = ""

			if ext == ".bat" or ext == ".cmd" or ext == ".ps1":
				shebang = "" #lol windows
			elif ext == ".js":
				shebang = "#!/usr/bin/env node"
			elif ext == ".pl":
				shebang = "#!/usr/bin/env perl"
			elif ext == ".py":
				shebang = "#!/usr/bin/env python3"
			elif ext == ".rb":
				shebang = "#!/usr/bin/env ruby"
			elif ext == ".sh":
				shebang = "#!/bin/bash"

			with open(current_script, 'w') as f:
				print("Writing %s..." % current_script)
				f.write(shebang + "\n")

			st = os.stat(current_script)
			os.chmod(current_script, st.st_mode | stat.S_IEXEC)
		

	print("\nðŸ‘‹  " + paint.bold.yellow("Bye!"))

if __name__ == "__main__": runScript()